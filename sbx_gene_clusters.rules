# -*- mode: Snakemake -*-
#
# Chunyu Zhao 2018-07-23
# Reads mapping to gene clusters/pathways/gene families of interest:
#   Rules for Diamond or BLASTx reads against protein databases

GENES_DIR = Cfg['sbx_gene_clusters']['genes_fp']
GENES_KEY = [PurePath(f.name).stem for f in GENES_DIR.glob('*.fasta')]
GENES_VAL = [str(GENES_DIR) + '/' + g+'.fasta' for g in GENES_KEY]
GENES_DICT = dict(zip(GENES_KEY, GENES_VAL))

TARGET_GENES = expand(str(MAPPING_FP/'sbx_gene_clusters'/'{gene}'/'{sample}_1.m8'), 
                     gene=GENES_DICT.keys(), sample=Samples.keys())

rule all_gene_family:
 input:
   TARGET_GENES

rule merge_pairs:
 input:
  r1 = str(QC_FP/'decontam'/'{sample}_1.fastq.gz'),
  r2 = str(QC_FP/'decontam'/'{sample}_2.fastq.gz')
 output:
  r1 = str(MAPPING_FP/'merged'/'{sample}.fastq')
 threads:
  Cfg['blast']['threads']
 shell:
  """
  vsearch \
    --fastq_mergepairs {input.r1} --reverse {input.r2} \
    --fastqout {output.reads} --threads {threads} \
    --fastq_allowmergestagger --fastq_maxdiffs 5 \
    --fastq_minovlen 10 --fastq_minmergelen 100
  """

rule build_diamond_db:
 input:
  lambda wildcards: GENES_DICT[wildcards.gene]
 output:
  expand(str(GENES_DIR/'{{gene}}.fasta.{index}'),index=['dmnd'])
 shell:
  """
  diamond makedb --in {input} -d {input} 
  """

rule build_blast_db:
 input:
  lambda wildcards: GENES_DICT[wildcards.gene]
 output:
  expand(str(GENES_DIR/'{{gene}}.fasta.{index}'),index=['psq','pin','phr'])
 shell:
  """
  makeblastdb -in {input} -dbtype prot
  """

rule fq_2_fa:
 input:
  str(QC_FP/'decontam'/'{sample}_1.fastq.gz')
 output:
  str(MAPPING_FP/'R1'/'{sample}_1.fasta')
 shell:
  """
  seqtk seq -a < <(gzip -cd {input}) > {output}
  """

rule diamond_reads:
 input:
  read = str(MAPPING_FP/'R1'/'{sample}_1.fasta'),
  db = expand(str(GENES_DIR/'{{gene}}.fasta.{index}'), index=['dmnd'])
 output:
  str(MAPPING_FP/'sbx_gene_clusters'/'{gene}'/'{sample}_1.m8')
 threads:
  Cfg['sbx_gene_clusters']['threads']
 shell:
  """
  diamond blastx \
          --db {input.db} --query {input.read} \
          --threads {threads} --evalue 1e-6 \
          --max-target-seqs 0 \
          --out {output} \
          --outfmt 6 qseqid sseqid pident qlen slen length mismatch gapopen qstart qend sstart send evalue bitscore
  """

rule blastx_reads:
 input:
  read = str(MAPPING_FP/'R1'/'{sample}_1.fasta'),
  db = expand(str(GENES_DIR/'{{gene}}.fasta.{index}'), index=['psq','pin','phr'])
 output:
  str(MAPPING_FP/'sbx_gene_clusters'/'{gene}'/'{sample}_1.blastx')
 params:
  db=lambda wildcard: GENES_DICT[wildcard.gene]
 threads:
  Cfg['sbx_gene_clusters']['threads']
 shell:
  """
  blastx -query {input.read} -db {params.db} \
         -num_threads {threads} -evalue 1e-6 \
         -max_target_seqs 5000 \
         -out {output} \
         -outfmt "6 qseqid sseqid pident qlen slen length mismatch gapopen qstart qend sstart send evalue bitscore"
  """

rule uniref50_download:
 output:
  str(MAPPING_FP/'sbx_gene_family'/'databases'/'uniref50.fasta')
 params:
  str(MAPPING_FP/'sbx_gene_family'/'databases')
 shell:
  """
  set +o pipefail
  mkdir -p {params}
  wget ftp://ftp.uniprot.org/pub/databases/uniprot/uniref/uniref50/uniref50.fasta.gz -P {params}
  """
